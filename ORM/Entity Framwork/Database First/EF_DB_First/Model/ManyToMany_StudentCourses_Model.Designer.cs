//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ManyToMany_StudentCourses_Model", "ManyToManyStudentCourses", "ManyToManyCourses", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EF_DB_First.Model.ManyToManyCours), "ManyToManyStudents", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EF_DB_First.Model.ManyToManyStudent))]

#endregion

namespace EF_DB_First.Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ManyToMany_StudentCourses_DBContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ManyToMany_StudentCourses_DBContext object using the connection string found in the 'ManyToMany_StudentCourses_DBContext' section of the application configuration file.
        /// </summary>
        public ManyToMany_StudentCourses_DBContext() : base("name=ManyToMany_StudentCourses_DBContext", "ManyToMany_StudentCourses_DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ManyToMany_StudentCourses_DBContext object.
        /// </summary>
        public ManyToMany_StudentCourses_DBContext(string connectionString) : base(connectionString, "ManyToMany_StudentCourses_DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ManyToMany_StudentCourses_DBContext object.
        /// </summary>
        public ManyToMany_StudentCourses_DBContext(EntityConnection connection) : base(connection, "ManyToMany_StudentCourses_DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ManyToManyCours> ManyToManyCourses
        {
            get
            {
                if ((_ManyToManyCourses == null))
                {
                    _ManyToManyCourses = base.CreateObjectSet<ManyToManyCours>("ManyToManyCourses");
                }
                return _ManyToManyCourses;
            }
        }
        private ObjectSet<ManyToManyCours> _ManyToManyCourses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ManyToManyStudent> ManyToManyStudents
        {
            get
            {
                if ((_ManyToManyStudents == null))
                {
                    _ManyToManyStudents = base.CreateObjectSet<ManyToManyStudent>("ManyToManyStudents");
                }
                return _ManyToManyStudents;
            }
        }
        private ObjectSet<ManyToManyStudent> _ManyToManyStudents;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ManyToManyCourses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToManyToManyCourses(ManyToManyCours manyToManyCours)
        {
            base.AddObject("ManyToManyCourses", manyToManyCours);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ManyToManyStudents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToManyToManyStudents(ManyToManyStudent manyToManyStudent)
        {
            base.AddObject("ManyToManyStudents", manyToManyStudent);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ManyToMany_StudentCourses_Model", Name="ManyToManyCours")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ManyToManyCours : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ManyToManyCours object.
        /// </summary>
        /// <param name="courseID">Initial value of the CourseID property.</param>
        public static ManyToManyCours CreateManyToManyCours(global::System.Int32 courseID)
        {
            ManyToManyCours manyToManyCours = new ManyToManyCours();
            manyToManyCours.CourseID = courseID;
            return manyToManyCours;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CourseID
        {
            get
            {
                return _CourseID;
            }
            set
            {
                if (_CourseID != value)
                {
                    OnCourseIDChanging(value);
                    ReportPropertyChanging("CourseID");
                    _CourseID = StructuralObject.SetValidValue(value, "CourseID");
                    ReportPropertyChanged("CourseID");
                    OnCourseIDChanged();
                }
            }
        }
        private global::System.Int32 _CourseID;
        partial void OnCourseIDChanging(global::System.Int32 value);
        partial void OnCourseIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CourseName
        {
            get
            {
                return _CourseName;
            }
            set
            {
                OnCourseNameChanging(value);
                ReportPropertyChanging("CourseName");
                _CourseName = StructuralObject.SetValidValue(value, true, "CourseName");
                ReportPropertyChanged("CourseName");
                OnCourseNameChanged();
            }
        }
        private global::System.String _CourseName;
        partial void OnCourseNameChanging(global::System.String value);
        partial void OnCourseNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ManyToMany_StudentCourses_Model", "ManyToManyStudentCourses", "ManyToManyStudents")]
        public EntityCollection<ManyToManyStudent> ManyToManyStudents
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ManyToManyStudent>("ManyToMany_StudentCourses_Model.ManyToManyStudentCourses", "ManyToManyStudents");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ManyToManyStudent>("ManyToMany_StudentCourses_Model.ManyToManyStudentCourses", "ManyToManyStudents", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ManyToMany_StudentCourses_Model", Name="ManyToManyStudent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ManyToManyStudent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ManyToManyStudent object.
        /// </summary>
        /// <param name="studentID">Initial value of the StudentID property.</param>
        public static ManyToManyStudent CreateManyToManyStudent(global::System.Int32 studentID)
        {
            ManyToManyStudent manyToManyStudent = new ManyToManyStudent();
            manyToManyStudent.StudentID = studentID;
            return manyToManyStudent;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StudentID
        {
            get
            {
                return _StudentID;
            }
            set
            {
                if (_StudentID != value)
                {
                    OnStudentIDChanging(value);
                    ReportPropertyChanging("StudentID");
                    _StudentID = StructuralObject.SetValidValue(value, "StudentID");
                    ReportPropertyChanged("StudentID");
                    OnStudentIDChanged();
                }
            }
        }
        private global::System.Int32 _StudentID;
        partial void OnStudentIDChanging(global::System.Int32 value);
        partial void OnStudentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StudentName
        {
            get
            {
                return _StudentName;
            }
            set
            {
                OnStudentNameChanging(value);
                ReportPropertyChanging("StudentName");
                _StudentName = StructuralObject.SetValidValue(value, true, "StudentName");
                ReportPropertyChanged("StudentName");
                OnStudentNameChanged();
            }
        }
        private global::System.String _StudentName;
        partial void OnStudentNameChanging(global::System.String value);
        partial void OnStudentNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ManyToMany_StudentCourses_Model", "ManyToManyStudentCourses", "ManyToManyCourses")]
        public EntityCollection<ManyToManyCours> ManyToManyCourses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ManyToManyCours>("ManyToMany_StudentCourses_Model.ManyToManyStudentCourses", "ManyToManyCourses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ManyToManyCours>("ManyToMany_StudentCourses_Model.ManyToManyStudentCourses", "ManyToManyCourses", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
